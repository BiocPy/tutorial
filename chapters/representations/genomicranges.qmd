# `GenomicRanges`: Genomic analysis

`GenomicRanges` is a Python package designed to handle genomic locations and facilitate genomic analysis. It is similar to Bioconductor's [GenomicRanges](https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html). **_Remember, intervals are inclusive on both ends and starts at 1._**

::: {.callout-note}
The class implementation aligns closely with Bioconductor's [R/GenomicRanges package](https://bioconductor.org/packages/release/bioc/manuals/GenomicRanges/man/GenomicRanges.pdf).
:::

## Construct a `GenomicRanges` object

To construct a `GenomicRanges` object from interval ranges (**Preferred way**)

```{python}
from genomicranges import GenomicRanges
from iranges import IRanges
from biocframe import BiocFrame
from random import random

gr = GenomicRanges(
    seqnames=[
        "chr1",
        "chr2",
        "chr3",
        "chr2",
        "chr3",
    ],
    ranges=IRanges([x for x in range(101, 106)], [11, 21, 25, 30, 5]),
    strand=["*", "-", "*", "+", "-"],
    mcols=BiocFrame(
        {
            "score": range(0, 5),
            "GC": [random() for _ in range(5)],
        }
    ),
)

print(gr)
```

### From UCSC or GTF file

You can also import genomes from UCSC or load a genome annotation from a GTF file:

```{python}
import genomicranges

# gr = genomicranges.read_gtf(<PATH TO GTF>)

# OR

# gr = genomicranges.read_ucsc(genome="hg19")
# print(gr)
```

### Pandas DataFrame

If your genomic coordinates are represented as a pandas `DataFrame`, convert this into `GenomicRanges` if it contains the necessary columns.

::: {.callout-note}
The `DataFrame` must contain columns `seqnames`, `starts` and `ends` to represent genomic coordinates. The rest of the columns are considered metadata and will be available in the `mcols` slot of the `GenomicRanges` object.
:::

```{python}
from genomicranges import GenomicRanges
import pandas as pd

df = pd.DataFrame(
    {
        "seqnames": ["chr1", "chr2", "chr1", "chr3", "chr2"],
        "starts": [101, 102, 103, 104, 109],
        "ends": [112, 103, 128, 134, 111],
        "strand": ["*", "-", "*", "+", "-"],
        "score": range(0, 5),
        "GC": [random() for _ in range(5)],
    }
)

gr = GenomicRanges.from_pandas(df)
print(gr)
```

### Set sequence information

The package provides a `SeqInfo` class to update or modify sequence information stored in the object. earn more about this in the [GenomeInfoDb package](https://bioconductor.org/packages/release/bioc/html/GenomeInfoDb.html).

```{python}
from genomicranges import SeqInfo

seq_obj = {
    "seqnames": ["chr1", "chr2", "chr3",],
    "seqlengths": range(100, 103),
    "is_circular": [random() < 0.5 for _ in range(3)],
    "genome": "hg19",
}

seq = SeqInfo(seq_obj)
gr.seq_info = seq
print(gr)
```

## Getters/Setters

Getters are available to access various properties.

```{python}
# access sequence names
gr.seqnames

# access all start positions
gr.start

# access annotation information if available
gr.seq_info

# compute and return the widths of each region
gr.width

# access metadata columns, everything other than genomic locations
print(gr.mcols)
```

### Setters

::: {.callout-important}
All property-based setters are `in_place` operations. Methods are available to get and set properties on GenomicRanges.
:::

```{python}
gr.mcols = gr.mcols.set_column("score", range(1,6))

# or use an in-place operation
gr.mcols.set_column("score", range(1,6), in_place=True)

print(gr.mcols)
```

### Access ranges

`ranges()` is a generic method to access only the genomic coordinates:

```{python}
# or gr.get_ranges()

print(gr.ranges)
```

## Subset operations

You can subset a `GenomicRange` object using the subset (`[]`) operator. This operation accepts different slice input types, such as a boolean vector, a `slice`` object, a list of indices, or row/column names to subset.

```{python}
# slice the first 3 rows
gr[:3]

# slice 1, 3 and 2nd rows
print(gr[[1,3,2]])
```

## Iterate over intervals

You can iterate over the intervals of a `GenomicRanges` object. `rowname` is `None` if the object does not contain any row names.

```{python}
for rowname, row in gr[:2]:
    print(rowname, row)
```

## Intra-range transformations

For detailed description of these methods, refer to Bioconductor's [GenomicRanges documentation](https://bioconductor.org/packages/release/bioc/manuals/GenomicRanges/man/GenomicRanges.pdf)

- **flank**: Flank the intervals based on **start** or **end** or **both**.
- **shift**: Shifts all the ranges specified by the **shift** argument.
- **resize**: Resizes the ranges to the specified width where either the **start**, **end**, or **center** is used as an anchor.
- **narrow**: Narrows the ranges.
- **promoters**: Promoters generates promoter ranges for each range relative to the TSS.The promoter range is expanded around the TSS according to the upstream and downstream parameters.
- **restrict**: Restricts the ranges to the interval(s) specified by the start and end arguments.
- **trim**: Trims out-of-bound ranges located on non-circular sequences whose length is not NA.

```{python}
gr = GenomicRanges(
    seqnames=[
        "chr1",
        "chr2",
        "chr3",
        "chr2",
        "chr3",
    ],
    ranges=IRanges([x for x in range(101, 106)], [11, 21, 25, 30, 5]),
    strand=["*", "-", "*", "+", "-"],
    mcols=BiocFrame(
        {
            "score": range(0, 5),
            "GC": [random() for _ in range(5)],
        }
    ),
)

# flank
flanked_gr = gr.flank(width=10, start=False, both=True)

# shift
shifted_gr = gr.shift(shift=10)

# resize
resized_gr = gr.resize(width=10, fix="end", ignore_strand=True)

# narrow
narrow_gr = gr.narrow(end=1, width=1)

# promoters
prom_gr = gr.promoters()

# restrict
restrict_gr = gr.restrict(start=114, end=140, keep_all_ranges=True)

# trim
trimmed_gr = gr.trim()
```

## Inter-range methods

- **range**: Returns a new `GenomicRanges` object containing range bounds for each distinct (seqname, strand) pair.
- **reduce**: returns a new `GenomicRanges` object containing reduced bounds for each distinct (seqname, strand) pair.
- **gaps**: Finds gaps in the `GenomicRanges` object for each distinct (seqname, strand) pair.
- **disjoin**: Finds disjoint intervals across all locations for each distinct (seqname, strand) pair.

```{python}
gr = GenomicRanges(
    seqnames=[
        "chr1",
        "chr2",
        "chr3",
        "chr2",
        "chr3",
    ],
    ranges=IRanges([x for x in range(101, 106)], [11, 21, 25, 30, 5]),
    strand=["*", "-", "*", "+", "-"],
    mcols=BiocFrame(
        {
            "score": range(0, 5),
            "GC": [random() for _ in range(5)],
        }
    ),
)

# range
range_gr = gr.range()

# reduce
# reduced_gr = gr.reduce(min_gap_width=3, with_reverse_map=True)

# gaps
gapped_gr = gr.gaps(start=103)  # OR
gapped_gr = gr.gaps(end={"chr1": 120, "chr2": 120, "chr3": 120})

# disjoin
disjoin_gr = gr.disjoin()

print(disjoin_gr)
```

## Set operations on genomic ranges

- **union**: Compute the `union` of intervals across object.
- **intersect**: Compute the `intersection` or finds overlapping intervals.
- **setdiff**: Compute `set` `difference`.

```{python}
g_src = GenomicRanges(
    seqnames = ["chr1", "chr2", "chr1", "chr3", "chr2"],
    ranges = IRanges(start =[101, 102, 103, 104, 109], width=[112, 103, 128, 134, 111]),
    strand = ["*", "-", "*", "+", "-"]
)

g_tgt = GenomicRanges(
    seqnames = ["chr1","chr2","chr2","chr2","chr1","chr1","chr3","chr3","chr3","chr3"],
    ranges = IRanges(start =range(101, 111), width=range(121, 131)),
    strand = ["*", "-", "-", "*", "*", "+", "+", "+", "-", "-"]
)
```

```{python}
# intersection
int_gr = g_src.intersect(g_tgt)

# set diff
diff_gr = g_src.setdiff(g_tgt)

# union
union_gr = g_src.union(g_tgt)

print(union_gr)
```

## Compute over bins

### Summary stats for column

Use Pandas for computing summary statistics for a column:
```{python}
pd.Series(gr.mcols.get_column("score")).describe()
```

### `binned_average`

Compute binned average for different positions:

```{python}
bins = pd.DataFrame({"seqnames": ["chr1"], "starts": [101], "ends": [109],})

bins_gr = GenomicRanges.from_pandas(bins)

subject = GenomicRanges(
    seqnames= ["chr1","chr2","chr2","chr2","chr1","chr1","chr3","chr3","chr3","chr3"],
    ranges=IRanges(range(101, 111), range(121, 131)),
    strand= ["*", "-", "-", "*", "*", "+", "+", "+", "-", "-"],
    mcols=BiocFrame({
        "score": range(0, 10),
    })
)

# Compute binned average
binned_avg_gr = subject.binned_average(bins=bins_gr, scorename="score", outname="binned_score")
print(binned_avg_gr)
```

::: {.callout-tip}
Now you might wonder how can I generate these ***bins***?
:::

### Generate tiles or bins from `GenomicRanges`

- **tile**: Splits each genomic region by **n** (number of regions) or by **width** (maximum width of each tile).
- **sliding_windows**: Generates sliding windows within each range, by **width** and **step**.

```{python}
gr = GenomicRanges(
    seqnames=[
        "chr1",
        "chr2",
        "chr3",
        "chr2",
        "chr3",
    ],
    ranges=IRanges([x for x in range(101, 106)], [11, 21, 25, 30, 5]),
    strand=["*", "-", "*", "+", "-"],
    mcols=BiocFrame(
        {
            "score": range(0, 5),
            "GC": [random() for _ in range(5)],
        }
    ),
)

# tiles
tiles = gr.tile(n=2)

# slidingwindows
tiles = gr.sliding_windows(width=10)
print(tiles)
```

### Generate tiles from Genome

`tile_genome` returns a set of genomic regions that form a partitioning of the specified genome.

```{python}
seqlengths = {"chr1": 100, "chr2": 75, "chr3": 200}

tiles = GenomicRanges.tile_genome(seqlengths=seqlengths, n=10)
print(tiles)
```

### Coverage

Computes number of ranges that overlap for each position in the range.

```{python}
import rich 

res_vector = gr.coverage(shift=10, width=5)
rich.print(res_vector)
```

## Overlap based methods

- **find_overlaps**: Find overlaps between two `GenomicRanges` objects.
- **count_overlaps**: Count overlaps between two `GenomicRanges` objects.
- **subset_by_overlaps**: Subset a `GenomicRanges` object if it overlaps with the ranges in the query.

```{python}
subject = GenomicRanges(
    seqnames= ["chr1","chr2","chr2","chr2","chr1","chr1","chr3","chr3","chr3","chr3"],
    ranges=IRanges(range(101, 111), range(121, 131)),
    strand= ["*", "-", "-", "*", "*", "+", "+", "+", "-", "-"],
    mcols=BiocFrame({
        "score": range(0, 10),
    })
)

df_query = pd.DataFrame(
    {"seqnames": ["chr2",], "starts": [4], "ends": [6], "strand": ["+"]}
)

query = GenomicRanges.from_pandas(df_query)

# find Overlaps
res = subject.find_overlaps(query, query_type="within")

# count Overlaps
res = subject.count_overlaps(query)

# subset by Overlaps
res = subject.subset_by_overlaps(query)

print(res)
```

## Search operations

- **nearest**: Performs nearest neighbor search along any direction (both upstream and downstream).
- **follow**: Performs nearest neighbor search only along downstream.
- **precede**: Performs nearest neighbor search only along upstream.

```{python}
find_regions = GenomicRanges(
    seqnames= ["chr1", "chr2", "chr3"],
    ranges=IRanges([200, 105, 1190],[203, 106, 1200]),
)

query_hits = gr.nearest(find_regions)

query_hits = gr.precede(find_regions)

query_hits = gr.follow(find_regions)

print(query_hits)
```

::: {.callout-note}
Similar to `IRanges` operations, these methods typically return a list of indices from `subject` for each interval in `query`.
:::

## Comparison, rank and order operations

- **match**: Element-wise comparison to find exact match intervals.
- **order**: Get the order of indices for sorting.
- **sort**: Sort the `GenomicRanges` object.
- **rank**: For each interval identifies its position is a sorted order.

```{python}
# match
query_hits = gr.match(gr[2:5])
print("matches: ", query_hits)

# order
order = gr.order()
print("order:", order)

# sort
sorted_gr = gr.sort()
print("sorted:", sorted_gr)

# rank
rank = gr.rank()
print("rank:", rank)
```

## Combine `GenomicRanges` objects by rows

Use the `combine` generic from [biocutils](https://github.com/BiocPy/generics) to concatenate multiple `GenomicRanges` objects.

```{python}
from biocutils.combine import combine
a = GenomicRanges(
    seqnames=["chr1", "chr2", "chr1", "chr3"],
    ranges=IRanges([1, 3, 2, 4], [10, 30, 50, 60]),
    strand=["-", "+", "*", "+"],
    mcols=BiocFrame({"score": [1, 2, 3, 4]}),
)

b = GenomicRanges(
    seqnames=["chr2", "chr4", "chr5"],
    ranges=IRanges([3, 6, 4], [30, 50, 60]),
    strand=["-", "+", "*"],
    mcols=BiocFrame({"score": [2, 3, 4]}),
)

combined = combine(a,b)
print(combined)
```

## Misc operations

- **invert_strand**: flip the strand for each interval
- **sample**: randomly choose ***k*** intervals

```{python}
# invert strand
inv_gr = gr.invert_strand()

# sample
samp_gr = gr.sample(k=4)
```

## Construct a `GenomicRangesList` object.

Just as it sounds, a `GenomicRangesList` is a named-list like object.

If you are wondering why you need this class, a `GenomicRanges` object lets us specify multiple
genomic elements, usually where the genes start and end. Genes are themselves made of many sub
regions, e.g. exons. `GenomicRangesList` allows us to represent this nested structure.

Currently, this class is limited in functionality, purely a read-only class with basic accessors.

***Note: This is a work in progress and the functionality is limited.***

```{python}
from genomicranges import GenomicRangesList
a = GenomicRanges(
    seqnames=["chr1", "chr2", "chr1", "chr3"],
    ranges=IRanges([1, 3, 2, 4], [10, 30, 50, 60]),
    strand=["-", "+", "*", "+"],
    mcols=BiocFrame({"score": [1, 2, 3, 4]}),
)

b = GenomicRanges(
    seqnames=["chr2", "chr4", "chr5"],
    ranges=IRanges([3, 6, 4], [30, 50, 60]),
    strand=["-", "+", "*"],
    mcols=BiocFrame({"score": [2, 3, 4]}),
)

grl = GenomicRangesList(ranges=[a,b], names=["gene1", "gene2"])
print(grl)
```


## Properties

```{python}
grl.start
grl.width
```

## Combine `GenomicRangeslist` object

Similar to the combine function from `GenomicRanges`,

```{python}
grla = GenomicRangesList(ranges=[a], names=["a"])
grlb = GenomicRangesList(ranges=[b, a], names=["b", "c"])

# or use the combine generic
from biocutils.combine import combine
cgrl = combine(grla, grlb)
```

and that's all for now! Check back later for more updates.