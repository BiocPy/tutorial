# Welcome {.unnumbered}

[Bioconductor](https://www.bioconductor.org) is an open-source software project 
that provides tools for the analysis and comprehension of genomic data. 
One of the main advantages of Bioconductor is the availability of 
standard data representations and large number of analysis tools for genomic 
experiments. 
These tools allow researchers to efficiently store, manipulate, and analyze
their data, leading to a deeper understanding of the underlying biological
processes.

Inspired by Bioconductor, [BiocPy](https://github.com/BiocPy) aims to facilitate 
bioconductor workflows in Python. 
To achieve this goal, we developed several core data structures that align 
closely to the bioconductor implementations. 
These structures efficiently manage genomic intervals and genome annotations
through [GenomicRanges](https://github.com/BiocPy/GenomicRanges) and/or 
[IRanges](https://github.com/BiocPy/IRanges), provide container classes 
to represent single 
([SummarizedExperiment](https://github.com/BiocPy/SummarizedExperiment), 
[SingleCellExperiment](https://github.com/BiocPy/SingleCellExperiment)) 
or multi-omic experimental data and metadata
([MultiAssayExperiment](https://github.com/BiocPy/MultiAssayExperiment)). 
In addition, BiocPy provides infrastructure packages to support delayed 
operations ([DelayedArray](https://github.com/BiocPy/DelayedArray)), 
Bioconductor-like dataframes ([BiocFrame](https://github.com/BiocPy/BiocFrame)), 
and incorporate numerous generics and utilities in 
[BiocUtils](https://github.com/BiocPy/BiocUtils). 
While there are prior initiatives aiming to port bioconductor representations 
into Python, BiocPy distinguishes itself as the first to develop seamless, 
well-integrated data structures and representations.

BiocPy additionally provides bindings to [libscran](https://github.com/LTLA/libscran) 
and various other single-cell analysis methods incorporated into the 
[scranpy](https://github.com/BiocPy/scranpy) package to support analysis of
multi-modal single-cell datasets. It also features integration 
with the [singler](https://github.com/BiocPy/singler) algorithm 
to annotate cell types by matching cells to known references based on their 
expression profiles.

For convenient access to experimental data stored in RDS files, the
[rds2py](https://github.com/BiocPy/rds2py) package provides bindings to the 
rds2cpp library. This allows direct reading of RDS files in Python, eliminating 
the need for additional data conversion tools or intermediate formats. This package 
functionality streamlines the transition between Python and R for seamless analysis.


All packages within the BiocPy ecosystem are published to Python's Package 
Index (PyPI).

## Selected packages

For complete list of all packages, visit the 
[GitHub:BiocPy](https://github.com/BiocPy) repository.

#### Core representations:

- `BiocUtils` ([GitHub](https://github.com/BiocPy/BiocUtils), [Docs](https://biocpy.github.io/BiocUtils/)): Common utilities for use across packages, mostly to mimic convenient aspects of base R.
- `BiocFrame` ([GitHub](https://github.com/BiocPy/BiocFrame), [Docs](https://biocpy.github.io/BiocFrame/)): Bioconductor-like dataframes in Python.
- `IRanges` ([GitHub](https://github.com/BiocPy/IRanges), [Docs](https://biocpy.github.io/IRanges/)): Python implementation of the IRanges package to support interval arithmetic.
- `GenomicRanges` ([GitHub](https://github.com/BiocPy/GenomicRanges), [Docs](https://biocpy.github.io/GenomicRanges/), [BioC](https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html)): Container class to represent genomic locations and support genomic analysis. Similar to Bioconductor's [GenomicRanges](https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html).
- `SummarizedExperiment` ([GitHub](https://github.com/BiocPy/SummarizedExperiment), [Docs](https://biocpy.github.io/SummarizedExperiment/), [BioC](https://bioconductor.org/packages/release/bioc/html/SummarizedExperiment.html)): Container class to represent genomic experiments, following Bioconductor's [SummarizedExperiment](https://bioconductor.org/packages/release/bioc/html/SummarizedExperiment.html).
- `SingleCellExperiment` ([GitHub](https://github.com/BiocPy/SingleCellExperiment), [Docs](https://biocpy.github.io/SingleCellExperiment/), [BioC](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html)): Container class to represent single-cell experiments; follows Bioconductorâ€™s [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html).
- `MultiAssayExperiment` ([GitHub](https://github.com/BiocPy/MultiAssayExperiment), [Docs](https://biocpy.github.io/MultiAssayExperiment/), [BioC](https://bioconductor.org/packages/release/bioc/html/MultiAssayExperiment.html)): Container class to represent multiple experiments and assays performed over a set of samples. follows Bioconductor's [MAE R/Bioc Package](https://bioconductor.org/packages/release/bioc/html/MultiAssayExperiment.html).

#### Analysis packages
- `scranpy`([GitHub](https://github.com/BiocPy/scranpy), [Docs](https://biocpy.github.io/scranpy/)): Python bindings to the single-cell analysis methods from libscran and related C++ libraries.
- `singler`([GitHub](https://github.com/BiocPy/singler), [Docs](https://biocpy.github.io/singler/)): Python bindings to the singleR algorithm to annotate cell types from known references.

#### Interoperability with R

- `rds2py` ([GitHub](https://github.com/BiocPy/rds2py), [Docs](https://biocpy.github.io/rds2py/)): Read RDS files directly in Python. Supports Bioconductor's `SummarizedExperiment` and `SingleCellExperiment` in addition to matrices, dataframes and vectors.

#### Utility packages

- `mopsy` ([GitHub](https://github.com/BiocPy/mopsy), [Docs](https://biocpy.github.io/mopsy/)): Helper functions to perform row or column operations over numpy and scipy matrices. Provides an interface similar to base R matrix methods/MatrixStats methods.
- `pyBiocFileCache` ([GitHub](https://github.com/BiocPy/pyBiocFileCache), [Docs](https://pypi.org/project/pyBiocFileCache/), [BioC](https://github.com/Bioconductor/BiocFileCache)): File system based cache for resources & metadata. 

----

## Further reading

Many online resources provide detailed info on these data structures, namely

- [https://compgenomr.github.io/book/](https://compgenomr.github.io/book/)
- [https://www.nature.com/articles/nmeth.3252](https://www.nature.com/articles/nmeth.3252)
- [https://www.nature.com/articles/s41592-019-0654-x](https://www.nature.com/articles/s41592-019-0654-x)
- [https://github.com/waldronlab/EPIC-BiocIntro](https://github.com/waldronlab/EPIC-BiocIntro)

#### Notes

This is a reproducible Quarto book with ***reusable snippets***. To learn more about Quarto books visit <https://quarto.org/docs/books>. Checkout [Reproduce me](./chapters/sessioninfo.qmd) for more information.
